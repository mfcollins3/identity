// Copyright 2024 Michael F. Collins, III
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.

// users.proto
//
// This file contains the Protocol Buffer definitions for the user
// authentication service. The user authentication service is responsible for
// authenticating local user accounts using a username (or email) and password.

syntax = "proto3";

package users;

option csharp_namespace = "NakedSoftware.Services.Users";
option go_package = "github.com/nakedsoftware/identity/services/users/pkg/proto";
option java_package = "software.naked.services.users";
option java_outer_classname = "UsersService";
option java_multiple_files = true;

// AuthenticatePasswordRequest is sent to the user authentication service to
// initially authenticate a user using a login (either a username or email) and
// a password.
message AuthenticatePasswordRequest {
    // A user will authenticate by providing either a username or an email. It
    // is up to the application to decide which field is used to identify a
    // local user account.
    oneof login {
        // The username of the user to authenticate.
        string username = 1;

        // The email address of the user to authenticate.
        string email = 2;
    }

    // The user's password to be compared with the password stored in the user
    // database to authenticate the user. The password is a secret value known
    // only to the users service and the user themselves.
    string password = 3;
}

// AuthenticatePasswordResponse is returned by the user authentication service
// if the user's password successfully matched the secret password stored in
// the database. AuthenticatePasswordResponse contains a state value that is
// used to track the authentication process for the user.
message AuthenticatePasswordResponse {
    // An opaque data structure that is used by the user authentication service
    // to manage the login state for the user.
    bytes state = 1;

    // If true, the user must provide a TOTP code to complete the
    // authentication and successfully login.
    bool requires_totp = 2;
}

// AuthenticateUserRequest is sent to the user authentication service to
// complete the login process for the user. If the user has two-factor
// authentication enabled, the client must provide the TOTP in the request
// to complete the authentication.
message AuthenticateUserRequest {
    // The login state returned from the original login request.
    bytes state = 1;
    
    // If required, the TOTP code generated by the user's authenticator app.
    string password = 2;
}

// AuthenticateUserResponse is returned by the user authentication service if
// the user is successfully authenticated. The response contains identity
// information about the user that was authenticated.
message AuthenticateUserResponse {
    string id = 1;
}

// AuthenticationService defines the API for the user authentication service.
// The user authentication service is responsible for verifying the identify
// of the user using password-based challenges.
service AuthenticationService {
    // AuthenticatePassword initiates a login session and attempts to
    // authenticate the local user using an email or username, and a secret
    // password. If the user is successfully authenticated, the service will
    // return a state value that is used to track and complete the login, and
    // an indicator if two-factor authentication is required.
    rpc AuthenticatePassword (AuthenticatePasswordRequest) returns (AuthenticatePasswordResponse) {}

    // AuthenticateUser completes the login process for a local user. If the
    // user's account required two-factor authentication, the second password
    // must be sent to AuthenticateUser along with the login state value to
    // complete the authentication and log the user in.
    rpc AuthenticateUser (AuthenticateUserRequest) returns (AuthenticateUserResponse) {}
}
